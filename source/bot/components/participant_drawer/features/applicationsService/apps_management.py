from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from components.participant_drawer.features.applicationsService.fsm_states import ApplicationStates
from components.participant_drawer.features.applicationsService.prefixes import ApplicationPrefixes
from components.participant_drawer.features.applicationsService.keyboards import (kb_change_status, kb_change_app,
                                                                                      kb_delete_app, kb_application_menu,
                                                                                      kb_back_to_menu)


router = Router()


@router.callback_query(lambda c: c.data == ApplicationPrefixes.PREFIX)
@router.callback_query(F.text == "–ú–µ–Ω—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫")
async def cb_pd_application_menu(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏
    await state.clear()
    await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", reply_markup=kb_application_menu())
    # await callback.message.answer("–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —ç—Ç–æ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª–µ–º",
    #                               reply_markup=kb_back_to_menu())
    await callback.message.answer("–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —ç—Ç–æ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª–µ–º")
    await callback.message.edit_reply_markup(reply_markup=None)


# ____________________________ Approving ____________________________


# –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(lambda c: c.data == f"{ApplicationPrefixes.LIST}")
async def cb_pd_application_list(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏–∑ –ë–î
    # applications = await db.get_data(["id", "name", "event", "topic", "faculty",
    #                                   "degree", "translator", "contact", "status"])

    # –ó–∞–≥–ª—É—à–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    applications = [
        {"id": 1, "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "event": "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è AI", "topic": "–§—É—Ä—å–µ-–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "faculty": "—Ñ–ö–ù–∏–ò–¢",
         "degree": "–º–∞–≥–∏—Å—Ç—Ä 1 –∫—É—Ä—Å–∞", "translator": "–ï—Å—Ç—å", "contact": "ivan@example.com", "status": "pending"},
        {"id": 2, "name": "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", "event": "–í–æ—Ä–∫—à–æ–ø Python", "topic": "–¢–µ—Ä–∞–≥–µ—Ä—Ü–æ–≤–æ–µ –∏–∑–ª—É—á–µ–Ω–∏–µ", "faculty": "–ò–Ω—Ñ–∏–∑",
         "degree": "–º–∞–≥–∏—Å—Ç—Ä 2 –∫—É—Ä—Å–∞", "translator": "–ï—Å—Ç—å", "contact": "+79123456789", "status": "approved"},
    ]

    if not applications:
        await callback.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", reply_markup=kb_back_to_menu())
        # await callback.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
        return

    await callback.message.answer("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:", reply_markup=kb_back_to_menu())
    # await callback.message.answer("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:")

    for app in applications:
        status_emoji = "üïí"
        kb = InlineKeyboardMarkup(inline_keyboard=[])

        if app['status'] == 'approved':
            status_emoji = "‚úÖ"
            kb = kb_change_status(app['id'])
        elif app['status'] == 'pending':
            status_emoji = "üïí"
            kb = InlineKeyboardMarkup(inline_keyboard=[])

        await callback.message.answer(
            f"""
            {status_emoji} –ó–∞—è–≤–∫–∞ #{app['id']}\n
            –£—á–∞—Å—Ç–Ω–∏–∫: {app['name']}\n
            –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {app['event']}\n
            –¢–µ–º–∞ –¥–æ–∫–ª–∞–¥–∞: {app['topic']}\n
            –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {app['degree']}\n
            –ù–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: {app['traslator']}\n
            –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {app['contact']}\n
            –°—Ç–∞—Ç—É—Å: {'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' if app['status'] == 'approved' else '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'}
            """, reply_markup=kb
        )

    # await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_back_to_menu())


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(lambda c: c.data.startswith(f"{ApplicationPrefixes.APPROVE}"))
async def cb_pd_application_approve(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    app_id = int(callback.data.split(f"{ApplicationPrefixes.APPROVE}")[1])
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
    # await db.change_status(app_id, 'approved')

    await callback.message.edit_text(
        callback.message.text.replace("üïí", "‚úÖ").replace("–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    )
    await callback.answer("–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")


# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(lambda c: c.data.startswith(f"{ApplicationPrefixes.REJECT}"))
async def cb_pd_application_reject(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    app_id = int(callback.data.split(f"{ApplicationPrefixes.REJECT}")[1])
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
    # await db.change_status(app_id, 'rejected')

    await callback.message.edit_text(
        callback.message.text.replace("üïí", "‚ùå").replace("–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    )
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")


# ____________________________ Delete ____________________________


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ - —à–∞–≥ 1: –≤—ã–±–æ—Ä ID
@router.callback_query(lambda c: c.data == f"{ApplicationPrefixes.DELETE}")
async def cb_pd_application_delete_start(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb_back_to_menu())
    # await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(ApplicationStates.waiting_for_delete_confirmation)
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
@router.message(ApplicationStates.waiting_for_delete_confirmation)
async def cb_pd_application_delete_confirm(message: Message, bot: Bot, state: FSMContext) -> None:
    if message.text == "main_menu":
        await cb_pd_application_menu(message)
        await state.clear()
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    try:
        app_id = int(message.text)

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ë–î
        id_list = await db.get_data(['id'])
        id_exists = any(value.get("name") == app_id for value in id_list)
        if id_exists:
            kb = kb_delete_app(app_id)

        await message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É #{app_id}?",
            reply_markup=kb
        )
    except ValueError:
        # await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏.", reply_markup=kb_back_to_menu())
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏.")


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("confirm_application_delete"))
async def cb_pd_application_delete_final(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    app_id = int(callback.data.split("_")[3])
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î
    # await db.delete_app(app_id)

    await callback.message.edit_text(f"–ó–∞—è–≤–∫–∞ #{app_id} —É–¥–∞–ª–µ–Ω–∞.")
    # await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_back_to_menu())


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "cancel_application_delete")
async def cb_pd_application_delete_cancel(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    # await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_back_to_menu())


# ____________________________ Editing ____________________________


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - —à–∞–≥ 1: –≤—ã–±–æ—Ä ID
@router.callback_query(lambda c: c.data == f"{ApplicationPrefixes.EDIT}")
async def cb_pd_application_edit_start(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb_back_to_menu())
    # await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await state.set_state(ApplicationStates.waiting_for_edit_choice)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - —à–∞–≥ 2: –≤—ã–±–æ—Ä –ø–æ–ª—è
@router.message(ApplicationStates.waiting_for_edit_choice)
async def cb_pd_application_edit_choose_field(message: Message, bot: Bot, state: FSMContext) -> None:
    # if message.text == "main_menu":
    #     await cb_pd_application_menu(message)
    #     await state.clear()
    #     return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    try:
        app_id = int(message.text)
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ë–î
        id_list = await db.get_data(['id'])

        id_exists = any(value.get("name") == app_id for value in id_list)
        if id_exists:
            kb = kb_change_app()

        await state.update_data(app_id=app_id)

        await message.answer(
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∑–∞—è–≤–∫–µ #{app_id}?",
            reply_markup=kb
        )
        await state.set_state(ApplicationStates.waiting_for_edit_value)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏.", reply_markup=kb_back_to_menu())


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - —à–∞–≥ 3: –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@router.callback_query(ApplicationStates.waiting_for_edit_value, F.data.startswith(f"{ApplicationPrefixes.EDIT}"))
async def cb_pd_application_edit_get_value(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    field = callback.data.split(f"{ApplicationPrefixes.EDIT}")[1]
    await state.update_data(field=field)
    await state.set_state(ApplicationStates.waiting_for_edit_finish)
    # await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:", reply_markup=kb_back_to_menu())
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:")


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - —Ñ–∏–Ω–∞–ª (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î)
@router.message(ApplicationStates.waiting_for_edit_finish)
async def cb_pd_application_edit_finish(message: Message, bot: Bot, state: FSMContext) -> None:
    # if message.text == "main_menu":
    #     await cb_pd_application_menu(message)
    #     await state.clear()
    #     return

    user_data = await state.get_data()
    app_id = user_data['app_id']
    field = user_data['field']
    new_value = message.text

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î
    # await db.update_app_field(app_id, field, new_value)
    
    await state.clear()

    await message.answer(f"""
        –ó–∞—è–≤–∫–∞ #{app_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n
        –ü–æ–ª–µ {field} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_value}
        """, reply_markup=kb_back_to_menu()
    )
