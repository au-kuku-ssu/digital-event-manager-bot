from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import smtplib
import random
import string

router = Router()

SMTP_SERVER = 'smtp.mail.ru'
SMTP_PORT = 465
EMAIL_FROM = 'egorlevoshin@mail.ru'
EMAIL_PASSWORD = 'EaT23nAxjyxZBku7jU5u'

def generate_code():
    characters = string.digits + string.ascii_letters
    return ''.join(random.choice(characters) for _ in range(6))

temp_storage = {}

@router.message(CommandStart())#–°—Ç–∞—Ä—Ç –±–æ—Ç–∞
async def cmd_start(message: Message):
    await message.answer('üìß –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏')

@router.message()#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def chat(message: Message):
    text = message.text.strip()
    if "@" in text:#—Å–º–æ—Ç—Ä–∏–º –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –æ–Ω –ø–æ—á—Ç—É
        await mail(message, text)
    else:
        await verify(message, text)

async def mail(message: Message, email: str):#–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ—è –Ω–∞ –ø–æ—á—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ–π–≤ –ø–æ—á—Ç—ã 
    email_to = message.text.strip()
    try:
        code= generate()
        user[message.from_user.id] = {
            "email": email,
            "code": code
        }
        msg = MIMEText(f"–í–∞—à –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {code}")
        msg['Subject'] = 'üîê –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏'
        msg['From'] = EMAIL_FROM
        msg['To'] = email_to
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SMTP (—Å SSL –∏–ª–∏ TLS)
        with smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT) if SMTP_PORT == 465 else smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            if SMTP_PORT == 587:  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TLS (–ø–æ—Ä—Ç 587)
                server.starttls()
            server.login(EMAIL_FROM, EMAIL_PASSWORD)
            server.sendmail(EMAIL_FROM, email_to, msg.as_string())
        await message.answer(f"‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email_to}! –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

async def verify(message: Message, user_input: str):
    user_data = user.get(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞")
        return
    
    if user_input == user_data["code"]:
        await message.answer("üéâ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        del user[message.from_user.id]
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
